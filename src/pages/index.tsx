import Head from 'next/head'
import useSWR, { mutate } from 'swr'
import { useEffect, useRef, useState } from 'react'

import {
  Center,
  Code,
  Container,
  Group,
  Input,
  Kbd,
  Pagination,
  Stack,
  Title,
  useMantineTheme,
} from '@mantine/core'
import { useHotkeys } from '@mantine/hooks'
import { IconSearch } from '@tabler/icons-react'

import Release from '@/types/release'
import ReleaseCard from '@/components/ReleaseCard'
import HeaderBar from '@/components/HeaderBar'

import DotLoader from 'react-spinners/DotLoader'
import { useAutoAnimate } from '@formkit/auto-animate/react'

export default function Main() {
  const theme = useMantineTheme()

  const [parent] = useAutoAnimate()

  const [activePage, setActivePage] = useState(1)
  const [perPage] = useState(15)

  const [searchQuery, setSearchQuery] = useState('')
  const searchBarRef = useRef<HTMLInputElement>(null)
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value)
  }

  // allows filtering for author name, release name/date and exact release id
  const searchFilter = (releases: Release[]) => {
    return releases.filter(
      (el) =>
        el.author.login.toLowerCase().includes(searchQuery.toLowerCase()) ||
        el.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        el.id.toString() === searchQuery
    )
  }

  useHotkeys([['mod+K', () => searchBarRef.current?.focus()]])

  useEffect(() => {
    mutate('/api/releases')
  }, [activePage])

  // fetches paginated results from github API
  const fetcher = (url: string, params: { per_page: number; page: number }) =>
    fetch(`${url}?per_page=${params.per_page}&page=${params.page}`).then((r) => r.json())

  const { data, error, isLoading } = useSWR<Release[]>(`/api/releases`, () =>
    fetcher('/api/releases', { per_page: perPage, page: activePage })
  )

  if (error)
    return (
      <Center style={{ width: '100%', height: '80vh' }}>
        <Code>
          <Title px='sm' order={2}>
            Failed to load users
          </Title>
        </Code>
      </Center>
    )
  if (isLoading)
    return (
      <Center style={{ width: '100%', height: '80vh' }}>
        <DotLoader color={theme.colors.blue[6]} />
        <Code mx='xl'>
          <Title px={'sm'} order={2}>
            Loading...
          </Title>
        </Code>
      </Center>
    )
  if (!data)
    return (
      <Center style={{ width: '100%', height: '80vh' }}>
        <Code px='sm'>
          <Title order={2}>No data</Title>
        </Code>
      </Center>
    )

  const filteredReleases = searchFilter(data)

  return (
    <>
      <Head>
        <title>React Release Lister</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <Container p='md' size='sm' style={{ width: '85%' }}>
        <HeaderBar />
        <Stack align='stretch' justify='center' ref={parent}>
          <Input
            ref={searchBarRef}
            style={{
              display: 'flex',
              alignItems: 'center',
            }}
            icon={<IconSearch size='16' />}
            placeholder='Search'
            size='md'
            radius='md'
            rightSectionWidth={90}
            rightSection={<Kbd>âŒ˜ + K</Kbd>}
            onChange={handleChange}
          />

          {filteredReleases.map((release) => (
            <div key={release.id}>
              <ReleaseCard release={release} />
            </div>
          ))}
          <Group position='center'>
            <Pagination radius='sm' page={activePage} onChange={setActivePage} total={2} />
          </Group>
        </Stack>
      </Container>
    </>
  )
}
