import Head from 'next/head'
import useSWR, { mutate, SWRConfig } from 'swr'
import Release from '@/types/release'
import {
  ActionIcon,
  Center,
  Container,
  Group,
  Input,
  Kbd,
  Pagination,
  Stack,
  Title,
  useMantineColorScheme,
} from '@mantine/core'
import ReleaseCard from '@/components/ReleaseCard'
import { useEffect, useRef, useState } from 'react'
import { IconMoonStars, IconSearch, IconSun } from '@tabler/icons-react'
import { useHotkeys } from '@mantine/hooks'

export default function Main() {
  const [activePage, setActivePage] = useState(1)
  const [perPage, setPerPage] = useState(15)

  const searchBarRef = useRef<HTMLInputElement>(null)
  const { colorScheme, toggleColorScheme } = useMantineColorScheme()

  useHotkeys([['mod+K', () => searchBarRef.current?.focus()]])

  const fetcher = (url: string, params: { per_page: number; page: number }) =>
    fetch(`${url}?per_page=${params.per_page}&page=${params.page}`).then((r) => r.json())

  const { data, error, isLoading } = useSWR<Release[]>(`/api/releases`, () =>
    fetcher('/api/releases', { per_page: perPage, page: activePage })
  )

  useEffect(() => {
    mutate('/api/releases')
  }, [activePage])

  if (error) return <Center>Failed to load users</Center>
  if (isLoading) return <Center>Loading...</Center>
  if (!data) return <Center>No data</Center>

  return (
    <>
      <Head>
        <title>React Release Lister</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
        <link
          href='https://api.fontshare.com/v2/css?f[]=satoshi@500&f[]=cabinet-grotesk@800&display=swap'
          rel='stylesheet'
        />
      </Head>

      <Container p='md' size='sm' style={{ width: '85%' }}>
        <Group position='apart'>
          <Title order={1}>React Releases</Title>

          <Group position='center' my='xl'>
            <ActionIcon
              onClick={() => toggleColorScheme()}
              size='lg'
              sx={(theme) => ({
                backgroundColor:
                  theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],
                color: theme.colorScheme === 'dark' ? theme.colors.yellow[4] : theme.colors.blue[6],
              })}
            >
              {colorScheme === 'dark' ? <IconSun size={24} /> : <IconMoonStars size={24} />}
            </ActionIcon>
          </Group>
        </Group>

        <Stack align='stretch' justify='center'>
          <Input
            ref={searchBarRef}
            style={{
              display: 'flex',
              alignItems: 'center',
            }}
            icon={<IconSearch size='16' />}
            placeholder='Search'
            size='md'
            radius='md'
            rightSectionWidth={90}
            rightSection={<Kbd>âŒ˜ + K</Kbd>}
          />

          {data.map((release) => (
            <div key={release.id}>
              <ReleaseCard release={release} />
            </div>
          ))}
          <Group position='center'>
            <Pagination radius='sm' page={activePage} onChange={setActivePage} total={2} />
          </Group>
        </Stack>
      </Container>
    </>
  )
}
